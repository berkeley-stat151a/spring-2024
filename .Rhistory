y_test_pred <- phi_test %*% betahat
err_train <- mean((y_train_pred - y_train)^2)
err_test <- mean((y_test_pred - y_test)^2)
this_result <- data.frame(nf=nf, err_test=err_test, err_train=err_train)
result <- bind_rows(result, this_result)
}
return(result)
}
result <- data.frame()
n_sims <- 50
pb <- txtProgressBar(min=0, max=n_sims, style=3)
for (sim in 1:n_sims) {
setTxtProgressBar(pb, sim)
result <- bind_rows(
result,
ComputeCurve(100) %>% mutate(sim=sim)
)
}
close(pb)
ggplot(result) +
geom_line(aes(x=nf, y=err_train, group=sim, color="train")) +
#  geom_line(aes(x=nf, y=err_test, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2))
plot(x_grid, EvalY(x_grid), 'l')
plot(x_grid, y_grid, 'l')
ComputeCurve <- function(max_nf) {
a <- rnorm(max_nf) * a_scale * 1.5
result <- data.frame()
for (nf in 2:max_nf) {
GetPhi <- GetFourierFeature(a[1:nf])
phi_train <- GetPhi(x_train) %>% as.matrix()
phi_test <- GetPhi(x_test) %>% as.matrix()
betahat <- ginv(t(phi_train) %*% phi_train) %*% t(phi_train) %*% y_train
y_train_pred <- phi_train %*% betahat
y_test_pred <- phi_test %*% betahat
err_train <- mean((y_train_pred - y_train)^2)
err_test <- mean((y_test_pred - y_test)^2)
betahat_l2 <- mean(betahat^2)
this_result <- data.frame(
nf=nf, err_test=err_test, err_train=err_train, betahat_l2)
result <- bind_rows(result, this_result)
}
return(result)
}
result <- data.frame()
n_sims <- 50
pb <- txtProgressBar(min=0, max=n_sims, style=3)
for (sim in 1:n_sims) {
setTxtProgressBar(pb, sim)
result <- bind_rows(
result,
ComputeCurve(100) %>% mutate(sim=sim)
)
}
close(pb)
grid.arrange(
ggplot(result) +
geom_line(aes(x=nf, y=err_test, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2)),
ggplot(result) +
geom_line(aes(x=nf, y=err_train, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)),
ggplot(result) +
geom_line(aes(x=nf, y=betahat_l2, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)),
ncol=3
)
library(gridExtra)
grid.arrange(
ggplot(result) +
geom_line(aes(x=nf, y=err_test, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2)),
ggplot(result) +
geom_line(aes(x=nf, y=err_train, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)),
ggplot(result) +
geom_line(aes(x=nf, y=betahat_l2, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)),
ncol=3
)
grid.arrange(
ggplot(result) +
geom_line(aes(x=nf, y=err_test + 1e-3, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=err_train + 1e-3, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=betahat_l2, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ncol=3
)
ComputeCurve <- function(max_nf) {
a <- rnorm(max_nf) * a_scale * 1.5
a <- 1:max_nf
result <- data.frame()
for (nf in 2:max_nf) {
GetPhi <- GetFourierFeature(a[1:nf])
phi_train <- GetPhi(x_train) %>% as.matrix()
phi_test <- GetPhi(x_test) %>% as.matrix()
betahat <- ginv(t(phi_train) %*% phi_train) %*% t(phi_train) %*% y_train
y_train_pred <- phi_train %*% betahat
y_test_pred <- phi_test %*% betahat
err_train <- mean((y_train_pred - y_train)^2)
err_test <- mean((y_test_pred - y_test)^2)
betahat_l2 <- mean(betahat^2)
this_result <- data.frame(
nf=nf, err_test=err_test, err_train=err_train, betahat_l2)
result <- bind_rows(result, this_result)
}
return(result)
}
result <- data.frame()
result <- bind_rows(
result,
ComputeCurve(100) %>% mutate(sim=sim)
)
grid.arrange(
ggplot(result) +
geom_line(aes(x=nf, y=err_test + 1e-3, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=err_train + 1e-3, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=betahat_l2, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ncol=3
)
ComputeCurve <- function(max_nf) {
n_obs <- 40
x_train <- runif(n_obs)
x_test <- runif(n_obs)
y_train <- EvalY(x_train)
y_test <- EvalY(x_test)
#a <- rnorm(max_nf) * a_scale * 1.5 # In 1d this generates bad features
a <- 1:max_nf
result <- data.frame()
for (nf in 2:max_nf) {
GetPhi <- GetFourierFeature(a[1:nf])
phi_train <- GetPhi(x_train) %>% as.matrix()
phi_test <- GetPhi(x_test) %>% as.matrix()
betahat <- ginv(t(phi_train) %*% phi_train) %*% t(phi_train) %*% y_train
y_train_pred <- phi_train %*% betahat
y_test_pred <- phi_test %*% betahat
err_train <- mean((y_train_pred - y_train)^2)
err_test <- mean((y_test_pred - y_test)^2)
betahat_l2 <- mean(betahat^2)
this_result <- data.frame(
nf=nf, err_test=err_test, err_train=err_train, betahat_l2)
result <- bind_rows(result, this_result)
}
return(result)
}
result <- data.frame()
n_sims <- 50
pb <- txtProgressBar(min=0, max=n_sims, style=3)
for (sim in 1:n_sims) {
setTxtProgressBar(pb, sim)
result <- bind_rows(
result,
ComputeCurve(100) %>% mutate(sim=sim)
)
}
close(pb)
grid.arrange(
ggplot(result) +
geom_line(aes(x=nf, y=err_test + 1e-3, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=err_train + 1e-3, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=betahat_l2, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ncol=3
)
ComputeCurve <- function(max_nf, n_obs) {
x_train <- runif(n_obs)
x_test <- runif(n_obs)
y_train <- EvalY(x_train)
y_test <- EvalY(x_test)
#a <- rnorm(max_nf) * a_scale * 1.5 # In 1d this generates bad features
a <- 1:max_nf
result <- data.frame()
for (nf in 2:max_nf) {
GetPhi <- GetFourierFeature(a[1:nf])
phi_train <- GetPhi(x_train) %>% as.matrix()
phi_test <- GetPhi(x_test) %>% as.matrix()
betahat <- ginv(t(phi_train) %*% phi_train) %*% t(phi_train) %*% y_train
y_train_pred <- phi_train %*% betahat
y_test_pred <- phi_test %*% betahat
err_train <- mean((y_train_pred - y_train)^2)
err_test <- mean((y_test_pred - y_test)^2)
betahat_l2 <- mean(betahat^2)
this_result <- data.frame(
nf=nf, err_test=err_test, err_train=err_train, betahat_l2)
result <- bind_rows(result, this_result)
}
return(result)
}
result <- data.frame()
n_sims <- 50
pb <- txtProgressBar(min=0, max=n_sims, style=3)
for (sim in 1:n_sims) {
setTxtProgressBar(pb, sim)
result <- bind_rows(
result,
ComputeCurve(max_nf=40, n_obs=20) %>% mutate(sim=sim)
)
}
close(pb)
grid.arrange(
ggplot(result) +
geom_line(aes(x=nf, y=err_test + 1e-3, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=err_train + 1e-3, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=betahat_l2, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ncol=3
)
result <- data.frame()
n_sims <- 50
n_obs <- 20
pb <- txtProgressBar(min=0, max=n_sims, style=3)
for (sim in 1:n_sims) {
setTxtProgressBar(pb, sim)
result <- bind_rows(
result,
ComputeCurve(max_nf=2 * n_obs, n_obs=n_obs) %>% mutate(sim=sim)
)
}
close(pb)
grid.arrange(
ggplot(result) +
geom_line(aes(x=nf, y=err_test + 1e-3, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=err_train + 1e-3, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=betahat_l2, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ncol=3
)
library(tidyverse)
library(MASS) # for ginv
library(gridExtra)
GetFourierFeature <- function(a) {
at <- t(as.matrix(a))
stopifnot(nrow(a) == 1)
EvalPhi <- function(x) {
stopifnot(is.null(dim(x)))
x_mod <- 2 * pi * matrix(x, ncol=1) %*% at
cx <- data.frame(cos(x_mod))
sx <- data.frame(sin(x_mod))
names(cx) <- paste0("C", 1:ncol(at))
names(sx) <- paste0("S", 1:ncol(at))
return(cbind(cx, sx))
}
return(EvalPhi)
}
p_true <- 100
#TruePhi <- GetFourierFeature(seq(1, p_true))
# decay <- 0.1
# wavenumber <- (1:p_true)
# decay  <- 1.5
# bc_true <- rnorm(p_true) / (wavenumber^decay)
# bs_true <- rnorm(p_true) / (wavenumber^decay)
a_scale <- 5
a_true <- a_scale * rnorm(p_true)
TruePhi <- GetFourierFeature(a_true)
bc_true <- rnorm(p_true)
bs_true <- rnorm(p_true)
EvalY <- function(x) {
phi_grid <- TruePhi(x) %>% as.matrix()
y <- phi_grid %*% c(bc_true, bs_true)
return(y)
}
x_grid <- seq(0, 1, length.out=100)
y_grid <- EvalY(x_grid)
if (FALSE) {
plot(x_grid, y_grid, 'l')
}
ComputeCurve <- function(max_nf, n_obs) {
x_train <- runif(n_obs)
x_test <- runif(n_obs)
y_train <- EvalY(x_train)
y_test <- EvalY(x_test)
#a <- rnorm(max_nf) * a_scale * 1.5 # In 1d this generates bad features
a <- 1:max_nf
result <- data.frame()
for (nf in 2:max_nf) {
GetPhi <- GetFourierFeature(a[1:nf])
phi_train <- GetPhi(x_train) %>% as.matrix()
phi_test <- GetPhi(x_test) %>% as.matrix()
betahat <- ginv(t(phi_train) %*% phi_train) %*% t(phi_train) %*% y_train
y_train_pred <- phi_train %*% betahat
y_test_pred <- phi_test %*% betahat
err_train <- mean((y_train_pred - y_train)^2)
err_test <- mean((y_test_pred - y_test)^2)
betahat_l2 <- mean(betahat^2)
this_result <- data.frame(
nf=nf, err_test=err_test, err_train=err_train, betahat_l2)
result <- bind_rows(result, this_result)
}
return(result)
}
result <- data.frame()
n_sims <- 50
n_obs <- 20
pb <- txtProgressBar(min=0, max=n_sims, style=3)
for (sim in 1:n_sims) {
setTxtProgressBar(pb, sim)
result <- bind_rows(
result,
ComputeCurve(max_nf=2 * n_obs, n_obs=n_obs) %>% mutate(sim=sim)
)
}
close(pb)
grid.arrange(
ggplot(result) +
geom_line(aes(x=nf, y=err_test + 1e-3, group=sim, color="test")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=err_train + 1e-3, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ggplot(result) +
geom_line(aes(x=nf, y=betahat_l2, group=sim, color="train")) +
geom_vline(aes(xintercept=n_obs / 2)) +
scale_y_log10(),
ncol=3
)
if (FALSE) {
ggplot() +
geom_line(aes(x=x_grid, y=y_grid, color="true")) +
geom_point(aes(x=x_train, y=reg$fitted.values, color="train")) +
geom_point(aes(x=x_test, y=y_test_fit, color="test"))
}
n_obs  <- 100
x <- rnorm(n_obs)
y <- rnorm(n_obs)
q_breaks <- c(0.25, 0.5, 0.75, 1)
quantile(x, q_breaks)
n_obs  <- 100
x <- rnorm(n_obs)
y <- rnorm(n_obs)
p_breaks <- c(0.25, 0.5, 0.75, 1)
x_q <- quantile(x, p_breaks)
y_q <- quantile(y, p_breaks)
library(tidyverse)
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q))
df
x_q
class(x_q)
library(tidyverse)
n_obs  <- 100
x <- rnorm(n_obs)
y <- rnorm(n_obs)
p_breaks <- c(0.25, 0.5, 0.75, 1)
x_q <- c(-Inf, quantile(x, p_breaks))
y_q <- c(-Inf, quantile(y, p_breaks))
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q))
df
table(df$x_q)
p_breaks <- c(0.25, 0.5, 0.75)
x_q <- c(-Inf, quantile(x, p_breaks))
y_q <- c(-Inf, quantile(y, p_breaks))
names(x_q) <- c(p_breaks, 1)
names(y_q) <- c(p_breaks, 1)
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q),
y_q=cut(y, y_q))
table(df$x_q)
table(df$y_q)
library(tidyverse)
n_obs  <- 100
x <- rnorm(n_obs)
y <- rnorm(n_obs)
p_breaks <- c(0.25, 0.5, 0.75, 1)
x_q <- c(-Inf, quantile(x, p_breaks))
y_q <- c(-Inf, quantile(y, p_breaks))
names(x_q) <- c(p_breaks, "error")
names(y_q) <- c(p_breaks, "error")
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q),
y_q=cut(y, y_q))
table(df$x_q)
table(df$y_q)
?cut
library(tidyverse)
n_obs  <- 100
x <- rnorm(n_obs)
y <- rnorm(n_obs)
p_breaks <- c(0.25, 0.5, 0.75, 1)
q_labels <- c(p_breaks, "error")
x_q <- c(-Inf, quantile(x, p_breaks))
y_q <- c(-Inf, quantile(y, p_breaks))
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=q_labels),
y_q=cut(y, y_q, labels=q_labels))
library(tidyverse)
n_obs  <- 100
x <- rnorm(n_obs)
y <- rnorm(n_obs)
p_breaks <- c(0.25, 0.5, 0.75, 1)
q_labels <- c(p_breaks, "error")
x_q <- c(-Inf, quantile(x, p_breaks))
y_q <- c(-Inf, quantile(y, p_breaks))
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=p_breaks),
y_q=cut(y, y_q, labels=p_breaks))
table(df$x_q)
table(df$y_q)
?summarize
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=p_breaks),
y_q=cut(y, y_q, labels=p_breaks)) %>%
group_by(x_q) %>%
summarize(y_mean=mean(y), .groups="drop") %>%
group_by(y_q) %>%
summarize(y_mean=mean(y), .groups="drop")
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=p_breaks),
y_q=cut(y, y_q, labels=p_breaks)) %>%
group_by(x_q) %>%
summarize(y_mean=mean(y), .groups="drop") %>%
group_by(y_q) %>%
summarize(x_mean=mean(x), .groups="drop")
data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=p_breaks),
y_q=cut(y, y_q, labels=p_breaks))
data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=p_breaks),
y_q=cut(y, y_q, labels=p_breaks)) %>%
group_by(x_q)
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=p_breaks),
y_q=cut(y, y_q, labels=p_breaks)) %>%
group_by(x_q) %>%
mutate(y_mean=mean(y), .groups="drop") %>%
group_by(y_q) %>%
mutate(x_mean=mean(x), .groups="drop")
ggplot(df) +
geom_line(aes(x=x_y, y=y_mean))
ggplot(df) +
geom_line(aes(x=x_q, y=y_mean))
df
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=p_breaks),
y_q=cut(y, y_q, labels=p_breaks)) %>%
group_by(x_q) %>%
mutate(y_mean=mean(y)) %>%
ungroup() %>% group_by(y_q) %>%
mutate(x_mean=mean(x))
ggplot(df) +
geom_line(aes(x=x_q, y=y_mean))
df
class(df$x_q)
df <- data.frame(x=x, y=y) %>%
mutate(x_q=cut(x, x_q, labels=p_breaks) %>% as.character() %>% as.numeric(),
y_q=cut(y, y_q, labels=p_breaks) %>% as.character() %>% as.numeric()) %>%
group_by(x_q) %>%
mutate(y_mean=mean(y)) %>%
ungroup() %>% group_by(y_q) %>%
mutate(x_mean=mean(x))
ggplot(df) +
geom_line(aes(x=x_q, y=y_mean))
ggplot(df) +
geom_line(aes(x=x_q, y=y_mean)) +
geom_line(aes(x=y_q, y=x_mean))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(tidyverse)
repo_dir <- "/home/rgiordan/Documents/git_repos/stat151a_website"
data_dir <- file.path(repo_dir, "datasets")
setwd("repo_dir")
library(tidyverse)
repo_dir <- "/home/rgiordan/Documents/git_repos/stat151a_website"
data_dir <- file.path(repo_dir, "datasets")
setwd(repo_dir)
knitr::opts_chunk$set(echo=TRUE)
df <- read.csv(file.path(data_dir, "aluminium.csv"))
df <- read.csv(file.path(data_dir, "aluminum_dataset.csv"))
head(df)
ggplot(df) +
geom_point(aes(x=Strain, y=Stress_MPA))
ggplot(df) +
geom_point(aes(x=Strain, y=Stress_MPa))
